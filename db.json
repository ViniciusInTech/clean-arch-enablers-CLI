{
    "functions": {
        "fuc": {
            "name": [
                "function use case",
                "fuc",
                "functionUseCase"
            ],
            "dir": [
                "factories",
                "factories\\dependency_wrapper",
                "implementations",
                "implementations\\ports",
                "io",
                "io\\inputs",
                "io\\outputs"
            ],
            "files": [
                {
                    "name": "<pc></pc>UseCase.java",
                    "path": "\\<sc></sc>\\",
                    "content": "package <pk></pk>;\n\nimport <pk_no_name></pk_no_name>.loggers.Logger;\nimport <pk_no_name></pk_no_name>.use_cases.metada.UseCaseMetadata;\nimport <pk_no_name></pk_no_name>.io.inputs.<pc></pc>UseCaseInput;\nimport <pk></pk>.io.outputs.<pc></pc>UseCaseOutput;\nimport <pk></pk>.specifics.functions.FunctionUseCase;\n\npublic abstract class <pc></pc>UseCase extends FunctionUseCase< <pc></pc>UseCaseInput, <pc></pc>UseCaseOutput> {\n    protected <pc></pc>UseCase(Logger logger) {\n        super(\n                UseCaseMetadata.ofOpenAccessUseCase(<pc></pc>UseCase.class, \"some description about this use case\"),\n                logger\n        );\n    }\n}"
                },
                {
                    "name": "teste.java",
                    "path": "\\<sc></sc>\\",
                    "content": "conteudo"
                }
            ]
        },
        "suc": {
            "name": [
                "suc",
                "supplierUseCase",
                "Supplier use case",
                "supplier use case"
            ],
            "dir": [
                "factories",
                "factories\\dependency_wrapper",
                "implementations",
                "implementations\\ports",
                "io",
                "io\\outputs"
            ],
            "files": [
                {
                    "name": "<pc>UseCaseFactory.java",
                    "path": "\\<sc></sc>\\factories\\",
                    "content": "package <pk></pk>.factories;\n\nimport <pk></pk>.<pc></pc>;\nimport <pk></pk>.factories.dependency_wrapper.<pc></pc>UseCaseDependencyWrapper;\nimport <pk></pk>.implementations.<pc></pc>UseCaseImplementation;\n\nimport java.util Optional;\n\npublic class <pc></pc>UseCaseFactory {\n\n    private <pc></pc>UseCaseFactory(){}\n\n    private static <pc></pc>UseCase singleton = null;\n\n    public static <pc></pc>UseCase makeInstance(<pc></pc>UseCaseDependencyWrapper dependencyWrapper){\n        return Optional.ofNullable(singleton).orElseGet(() -> {\n            singleton = new <pc></pc>UseCaseImplementation(dependencyWrapper.getLogger());\n            return singleton;\n        });\n    }\n\n    public static Optional< <pc></pc> > getSingleton() { return Optional.ofNullable(singleton);}\n\n}"
                },
                {
                    "name": "<pc></pc>UseCase.java",
                    "path": "\\<sc></sc>\\",
                    "content": "package <pk></pk>;\n\nimport <pk_no_name></pk_no_name>.loggers.Logger;\nimport <pk_no_name></pk_no_name>.use_cases.metada.UseCaseMetadata;\nimport <pk></pk>.io.outputs.<pc></pc>UseCaseOutput;\nimport <pk></pk>.specifics.functions.SupplierUseCase;\n\npublic abstract class <pc></pc>UseCase extends SupplierUseCase< <pc></pc>UseCaseOutput> {\n    protected <pc></pc>UseCase(Logger logger) {\n        super(\n                UseCaseMetadata.ofOpenAccessUseCase(<pc></pc>UseCase.class, \"some description about this use case\"),\n                logger\n        );\n    }\n}"
                }
            ]
        }
    },
    "commands": [
        "new",
        "add"
    ]
}
